"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { ArrowLeftIcon, SendIcon } from "lucide-react";
import Link from "next/link";
import { ModelSelector } from "./model-selector";

interface ChatProps {
  modelId: string;
}

export function Chat({ modelId }: ChatProps) {
  const [messages, setMessages] = useState<{ role: string; content: string }[]>([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [currentModel, setCurrentModel] = useState(modelId);

  const handleSend = async () => {
    if (!input.trim() || loading) return;
    
    const userMessage = { role: "user", content: input };
    setMessages(prev => [...prev, userMessage]);
    setInput("");
    setLoading(true);
    
    try {
      // In a real implementation, this would call an API endpoint
      // that uses AI SDK to generate a response with the selected model
      
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // For demo purposes, generate a fake response
      const modelName = currentModel.split('/')[1] || currentModel;
      const assistantMessage = { 
        role: "assistant", 
        content: `This is a simulated response from ${modelName}. In a real implementation, this would be generated by the AI SDK using the selected model.` 
      };
      
      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error("Error generating response:", error);
      setMessages(prev => [
        ...prev,
        { role: "assistant", content: "Sorry, there was an error generating a response." }
      ]);
    } finally {
      setLoading(false);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  return (
    <div className="container py-6 space-y-4">
      <div className="flex items-center justify-between">
        <Link href="/">
          <Button variant="ghost" size="sm" className="gap-2">
            <ArrowLeftIcon className="h-4 w-4" />
            Back
          </Button>
        </Link>
        
        <ModelSelector 
          value={currentModel} 
          onChange={setCurrentModel} 
        />
      </div>

      <Card className="min-h-[600px] flex flex-col">
        <CardHeader className="border-b">
          <h2 className="text-lg font-medium">Chat with {currentModel.split('/')[1] || currentModel}</h2>
        </CardHeader>
        
        <CardContent className="flex-1 overflow-auto p-4 space-y-4">
          {messages.length === 0 ? (
            <div className="flex items-center justify-center h-full">
              <p className="text-muted-foreground text-center">
                Send a message to start chatting with {currentModel.split('/')[1] || currentModel}
              </p>
            </div>
          ) : (
            messages.map((message, index) => (
              <div
                key={index}
                className={`flex ${
                  message.role === "user" ? "justify-end" : "justify-start"
                }`}
              >
                <div
                  className={`max-w-[80%] rounded-lg px-4 py-2 ${
                    message.role === "user"
                      ? "bg-primary text-primary-foreground"
                      : "bg-muted"
                  }`}
                >
                  {message.content}
                </div>
        </div>
            ))
          )}
        </CardContent>
        
        <CardFooter className="border-t p-4">
          <div className="flex w-full items-center space-x-2">
            <Input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="Type a message..."
              disabled={loading}
              />
              <Button
              onClick={handleSend} 
              disabled={!input.trim() || loading}
                size="icon"
              >
                <SendIcon className="h-4 w-4" />
              </Button>
            </div>
        </CardFooter>
        </Card>
    </div>
  );
}
